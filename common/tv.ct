#include "tv.h"
#include "defs.h"
#include "array.h"
#include "fread.h"
#include "fscan.h"
#include "qsort.h"
#include "fwrite.h"
#include "sorted_int_list.h"

#include <assert.h>

.insert tvconf.t
.include lydia.ct
#line $[1+${tpllineno}] "${tplfilename}"

tv_variables_cache initialize_tv_variables_cache(const_variable_list variables)
{
    register unsigned int ix;
    register unsigned int iy;

    tv_variables_cache result = (tv_variables_cache)malloc(sizeof(struct str_tv_variables_cache));
    if (NULL == result) {
        return result;
    }
    memset(result, 0, sizeof(struct str_tv_variables_cache));

    result->list = variables;

    if (NULL == (result->is_assumable = (signed char *)malloc(variables->sz * sizeof(signed char))) ||
        NULL == (result->is_observable = (signed char *)malloc(variables->sz * sizeof(signed char))) ||

        NULL == (result->v_to_a = (unsigned int *)malloc(variables->sz * sizeof(unsigned int))) ||

        NULL == (result->a_to_v = (unsigned int *)malloc(variables->sz * sizeof(unsigned int))) ||

        NULL == (result->p_true = (double *)malloc(variables->sz * sizeof(double))) ||
        NULL == (result->p_false = (double *)malloc(variables->sz * sizeof(double))) ||
        NULL == (result->p_max = (double *)malloc(variables->sz * sizeof(double))) ||

        NULL == (result->health_states = (unsigned char *)malloc(variables->sz * sizeof(unsigned char)))) {

        destroy_tv_variables_cache(result);

        return NULL;
    }

    memset(result->health_states, 0, variables->sz * sizeof(unsigned char));

    result->assumables = 0;
    result->variables = variables->sz;

    for (ix = 0; ix < variables->sz; ix++) {
        assert(TAGbool_variable == variables->arr[ix]->tag);
        if (is_observable(variables->arr[ix])) {
            result->is_observable[ix] = 1;
        } else {
            result->is_observable[ix] = 0;
        }
        if (is_assumable(variables->arr[ix])) {
            iy = result->assumables;

            result->v_to_a[ix] = iy;
            result->a_to_v[iy] = ix;

            result->p_false[iy] = 0;
            result->p_true[iy] = 0;
            result->p_max[iy] = 0;

            result->assumables += 1;

            result->is_assumable[ix] = 1;
        }
        if (is_health(variables->arr[ix])) {
            iy = result->assumables;

            result->v_to_a[ix] = iy;
            result->a_to_v[iy] = ix;

            result->p_false[iy] = get_probability_bool(variables->arr[ix], 0);
            result->p_true[iy] = get_probability_bool(variables->arr[ix], 1);
            result->p_max[iy] = max(result->p_false[iy], result->p_true[iy]);

            if (get_health_bool(variables->arr[ix], 0)) {
                result->health_states[iy] |= 1;
            }
            if (get_health_bool(variables->arr[ix], 1)) {
                result->health_states[iy] |= 2;
            }

            result->assumables += 1;

            result->is_assumable[ix] = 1;
        } else {
            result->is_assumable[ix] = 0;
        }
    }

    result->a_to_v = (unsigned int *)realloc(result->a_to_v, result->assumables * sizeof(unsigned int));

    result->p_true = (double *)realloc(result->p_true, result->assumables * sizeof(double));
    result->p_false = (double *)realloc(result->p_false, result->assumables * sizeof(double));
    result->p_max = (double *)realloc(result->p_max, result->assumables * sizeof(double));

    result->health_states = (unsigned char *)realloc(result->health_states, result->assumables * sizeof(unsigned char));

    return result;
}

void destroy_tv_variables_cache(tv_variables_cache cache)
{
    if (NULL != cache->v_to_a) {
        free(cache->v_to_a);
    }
    if (NULL != cache->a_to_v) {
        free(cache->a_to_v);
    }

    if (NULL != cache->p_true) {
        free(cache->p_true);
    }
    if (NULL != cache->p_false) {
        free(cache->p_false);
    }
    if (NULL != cache->p_max) {
        free(cache->p_max);
    }

    if (NULL != cache->is_assumable) {
        free(cache->is_assumable);
    }
    if (NULL != cache->is_observable) {
        free(cache->is_observable);
    }

    if (NULL != cache->health_states) {
        free(cache->health_states);
    }

    free(cache);
}

/* Returns 1 iff cy is subsumed by cx. */
int is_subsumed_literal_set(const_tv_literal_set cx, const_tv_literal_set cy)
{
    return is_subset_int_list(cx->pos, cy->pos) && 
           is_subset_int_list(cx->neg, cy->neg);
}

array literal_set_to_sorted_int_list(const_tv_literal_set ls)
{
    register unsigned int ix;

    array result = array_new(NULL, NULL);

    for (ix = 0; ix < ls->neg->sz; ix++) {
        array_append(result, i2p(p2i(ls->neg->arr[ix]) * 2));
    }
    for (ix = 0; ix < ls->pos->sz; ix++) {
        array_append(result, i2p(p2i(ls->pos->arr[ix]) * 2 + 1));
    }

    return array_int_sort(result);
}

tv_literal_set int_list_to_literal_set(array l, tv_literal_set model)
{
    unsigned int i;

    tv_literal_set result = rdup_tv_literal_set(model);
    result->pos = new_int_list();
    result->neg = new_int_list();
    for (i = 0; i < l->sz; i++) {
        if (p2i(l->arr[i]) % 2) {
            result->pos = append_int_list(result->pos, p2i(l->arr[i]) / 2);
        } else {
            result->neg = append_int_list(result->neg, p2i(l->arr[i]) / 2);
        }
    }
    return result;
}

tv_clause_list term_to_tv_clause_list(const_tv_term t)
{
    tv_clause_list result = new_tv_clause_list();
    unsigned int i;

    for (i = 0; i < t->pos->sz; i++) {
        tv_clause cl = new_tv_clause(new_int_list(), new_int_list());
        cl->pos = append_int_list(cl->pos, t->pos->arr[i]);
        result = append_tv_clause_list(result, cl);
    }

    for (i = 0; i < t->neg->sz; i++) {
        tv_clause cl = new_tv_clause(new_int_list(), new_int_list());
        cl->neg = append_int_list(cl->neg, t->neg->arr[i]);
        result = append_tv_clause_list(result, cl);
    }

    return result;
}

int is_tv_cnf_wfm(const_tv_cnf cnf, int *result)
{
    register unsigned int ix, iy;

    unsigned char *signs;

    const_variable_list variables = cnf->variables;

    if (NULL == (signs = (unsigned char *)malloc(variables->sz * sizeof(unsigned char)))) {
        return 0;
    }
    memset(signs, 0, variables->sz * sizeof(unsigned char));

    for (ix = 0; ix < cnf->clauses->sz; ix++) {
        tv_clause clause = (tv_clause)cnf->clauses->arr[ix];

        for (iy = 0; iy < clause->neg->sz; iy++) {
            signs[clause->neg->arr[iy]] |= 1;
        }
        for (iy = 0; iy < clause->pos->sz; iy++) {
            signs[clause->pos->arr[iy]] |= 2;
        }
    }
    for (ix = 0; ix < variables->sz; ix++) {
        if (!is_health(variables->arr[ix])) {
            continue;
        }
        if (signs[ix] == 3) {
            *result = 0;
            free(signs);
            return 1;
        } else if (signs[ix] == 0) {
            continue;
        } else if (signs[ix] == 1) {
            if (get_health_bool(variables->arr[ix], 0)) {
                *result = 0;
                free(signs);
                return 1;
            }
        } else if (signs[ix] == 2) {
            if (get_health_bool(variables->arr[ix], 1)) {
                *result = 0;
                free(signs);
                return 1;
            }
        } else {
            assert(0);
            abort();
        }
    }

    *result = 1;
    free(signs);

    return 1;
}

int are_sorted_tv_terms_consistent(const_tv_term l, const_tv_term r)
{
    if (!is_sorted_term_consistent(l->neg, r->pos)) {
        return 0;
    }
    if (!is_sorted_term_consistent(l->pos, r->neg)) {
        return 0;
    }
    return 1;
}

tv_literal_set_list get_literal_sets(const_tv_nf cf)
{
    if (cf->tag == TAGtv_cnf) {
        return (void *)to_tv_cnf(cf)->clauses;
    }
    if (cf->tag == TAGtv_dnf) {
        return (void *)to_tv_dnf(cf)->terms;
    }
    assert(0);
    abort();
}

tv_literal_set_list set_literal_sets(tv_nf cf, tv_literal_set_list ls)
{
    if (cf->tag == TAGtv_cnf) {
        tv_clause_list clauses = to_tv_cnf(cf)->clauses;
        to_tv_cnf(cf)->clauses = (void *)ls;
        return (void *)clauses;
    }
    if (cf->tag == TAGtv_dnf) {
        tv_term_list terms = to_tv_dnf(cf)->terms;
        to_tv_dnf(cf)->terms = (void *)ls;
        return (void *)terms;
    }
    assert(0);
    abort();
}

tv_term assignment_to_tv_term(const_variable_assignment_list assignments)
{
    register unsigned int ix;

    bool_variable_assignment assignment;

    tv_term term;

    term = new_tv_term(new_int_list(), new_int_list());

    for (ix = 0; ix < assignments->sz; ix++) {
        assignment = to_bool_variable_assignment(assignments->arr[ix]);
        assert(TAGbool_variable_assignment == assignments->arr[ix]->tag);

        if (LYDIA_FALSE == assignment->value) {
            append_int_list(term->neg, assignment->var);
        } else if (LYDIA_TRUE == assignment->value) {
            append_int_list(term->pos, assignment->var);
        } else {
            assert(0);
        }
    }
    term->pos = sort_int_list(term->pos);
    term->neg = sort_int_list(term->neg);

    return term;
}

/*
 * Local variables:
 * mode: c
 * End:
 */
